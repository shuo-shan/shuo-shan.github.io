[{"name":"app.R","content":"# Forecasting Sandbox ----\n# This is an example for a Shinylive R app\n# The app provides a forecasting sandbox for the AirPassengers dataset\n# It supports 3 stats forecasting models - Linear Regression, ARIMA, and Holt-Winters\n\nlibrary(shiny)\nlibrary(ggplot2)\ndata(AirPassengers)\n#load(file=\"./myapp/temp_test.RData\")\n\n# # Define UI for application\n# ui <- fluidPage(\n#   \n#   # Application title\n#   titlePanel(\"Plotting on-demand\"),\n#   \n#   # Sidebar layout with input and output definitions\n#   sidebarLayout(\n#     sidebarPanel(\n#       # Text input\n#       textInput(\"input_gene\", \"Enter gene name:\", \"\"),\n#       \n#       # Plot button\n#       actionButton(\"plot_button\", \"Plot\")\n#     ),\n#     \n#     # Output: Plot\n#     mainPanel(\n#       plotOutput(\"text_plot\")\n#     )\n#   )\n# )\n# \n# # Define server logic\n# server <- function(input, output) {\n#   \n#   # Render plot when plot button is clicked\n#   observeEvent(input$plot_button, {\n#     print(\"plot button clicked\")\n#     gene <- input$input_gene\n#     output$text_plot <- renderPlot({\n#       print(\"Calling make_reQTL_plot_CPM_3cts\")\n#       plot_gene_expression(table, gene)\n#     })\n#   })\n# }\n# \n# # Run the application\n# shinyApp(ui = ui, server = server)\n# UI ----\nui <- fluidPage(\n  \n  # App title ----\n  titlePanel(\"Forecasting Sandbox\"),\n  sidebarLayout(\n    \n    sidebarPanel(width = 3,\n                 selectInput(inputId = \"model\",\n                             label = \"Select Model\",\n                             choices = c(\"Linear Regression\", \"ARIMA\", \"Holt-Winters\"),\n                             selected = \"Linear Regression\"),\n                 # Linear Regression model arguments\n                 conditionalPanel(condition = \"input.model == 'Linear Regression'\",\n                                  checkboxGroupInput(inputId = \"lm_args\", \n                                                     label = \"Select Regression Features:\", \n                                                     choices = list(\"Trend\" = 1, \n                                                                    \"Seasonality\" = 2),\n                                                     selected = 1)),\n                 # ARIMA model arguments\n                 conditionalPanel(condition = \"input.model == 'ARIMA'\",\n                                  h5(\"Order Parameters\"),\n                                  sliderInput(inputId = \"p\",\n                                              label = \"p:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  sliderInput(inputId = \"d\",\n                                              label = \"d:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  sliderInput(inputId = \"q\",\n                                              label = \"q:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  h5(\"Seasonal Parameters:\"),\n                                  sliderInput(inputId = \"P\",\n                                              label = \"P:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  sliderInput(inputId = \"D\",\n                                              label = \"D:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  sliderInput(inputId = \"Q\",\n                                              label = \"Q:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0)\n                 ),\n                 # Holt Winters model arguments\n                 conditionalPanel(condition = \"input.model == 'Holt-Winters'\",\n                                  checkboxGroupInput(inputId = \"hw_args\", \n                                                     label = \"Select Holt-Winters Parameters:\", \n                                                     choices = list(\"Beta\" = 2, \n                                                                    \"Gamma\" = 3),\n                                                     selected = c(1, 2, 3)),\n                                  selectInput(inputId = \"hw_seasonal\",\n                                              label = \"Select Seasonal Type:\",\n                                              choices = c(\"Additive\", \"Multiplicative\"),\n                                              selected = \"Additive\")),\n                 \n                 checkboxInput(inputId = \"log\", \n                               label = \"Log Transformation\",\n                               value = FALSE),\n                 sliderInput(inputId = \"h\",\n                             label = \"Forecasting Horizon:\",\n                             min = 1,\n                             max = 60,\n                             value = 24)\n                 #   actionButton(inputId = \"update\",\n                 #                 label = \"Update!\")\n                 \n    ),\n    \n    # Main panel for displaying outputs ----\n    mainPanel(width = 9,\n              # Forecast Plot ----\n              plotOutput(outputId = \"fc_plot\",\n                         height = \"400px\")\n              \n    )\n  )\n)\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output) {\n  # Load the dataset a reactive object\n  d <- reactiveValues(df = data.frame(input = as.numeric(AirPassengers), \n                                      index = seq.Date(from = as.Date(\"1949-01-01\"),\n                                                       by = \"month\",\n                                                       length.out = length(AirPassengers))),\n                      air = AirPassengers)\n  \n  # Log transformation \n  observeEvent(input$log,{\n    if(input$log){\n      d$df <- data.frame(input = log(as.numeric(AirPassengers)), \n                         index = seq.Date(from = as.Date(\"1949-01-01\"),\n                                          by = \"month\",\n                                          length.out = length(AirPassengers)))\n      \n      d$air <- log(AirPassengers)\n    } else {\n      d$df <- data.frame(input = as.numeric(AirPassengers), \n                         index = seq.Date(from = as.Date(\"1949-01-01\"),\n                                          by = \"month\",\n                                          length.out = length(AirPassengers)))\n      \n      d$air <- AirPassengers\n    }\n  })\n  \n  # The forecasting models execute under the plot render\n  output$fc_plot <- renderPlot({\n    \n    # if adding a prediction intervals level argument set over here\n    pi <- 0.95\n    \n    # Holt-Winters model\n    if(input$model == \"Holt-Winters\"){\n      a <- b <- c <- NULL\n      \n      if(!\"2\" %in% input$hw_args){\n        b <- FALSE\n      }\n      \n      if(!\"3\" %in% input$hw_args){\n        c <- FALSE\n      }\n      \n      md <- HoltWinters(d$air, \n                        seasonal = ifelse(input$hw_seasonal == \"Additive\", \"additive\", \"multiplicative\"),\n                        beta = b,\n                        gamma = c\n      )\n      fc <- predict(md, n.ahead = input$h, prediction.interval = TRUE) |>\n        as.data.frame()\n      fc$index <- seq.Date(from = as.Date(\"1961-01-01\"),\n                           by = \"month\",\n                           length.out = input$h)\n      # ARIMA model\n    } else if(input$model == \"ARIMA\"){\n      \n      md <- arima(d$air,\n                  order = c(input$p, input$d, input$q),\n                  seasonal = list(order = c(input$P, input$D, input$Q))\n      )\n      fc <- predict(md, n.ahead = input$h, prediction.interval = TRUE) |>\n        as.data.frame() \n      names(fc) <- c(\"fit\", \"se\")\n      \n      fc$index <- seq.Date(from = as.Date(\"1961-01-01\"),\n                           by = \"month\",\n                           length.out = input$h)\n      \n      fc$upr <- fc$fit + 1.96 * fc$se\n      fc$lwr <- fc$fit - 1.96 * fc$se\n      # Linear Regression model\n    } else if(input$model == \"Linear Regression\"){\n      \n      d_lm <- d$df\n      \n      d_fc <- data.frame(index = seq.Date(from = as.Date(\"1961-01-01\"),\n                                          by = \"month\",\n                                          length.out = input$h))\n      \n      if(\"1\" %in% input$lm_args){\n        d_lm$trend <- 1:nrow(d_lm)\n        d_fc$trend <- (max(d_lm$trend) + 1):(max(d_lm$trend) + input$h)\n      }\n      \n      if(\"2\" %in% input$lm_args){\n        d_lm$season <- as.factor(months((d_lm$index)))\n        d_fc$season <- factor(months((d_fc$index)), levels = levels(d_lm$season))\n      }\n      \n      md <- lm(input ~ ., data = d_lm[, - which(names(d_lm) == \"index\")])\n      \n      fc <- predict(md, n.ahead = input$h, interval = \"prediction\",\n                    level = pi, newdata = d_fc) |>\n        as.data.frame() \n      \n      \n      fc$index <- seq.Date(from = as.Date(\"1961-01-01\"),\n                           by = \"month\",\n                           length.out = input$h)\n      \n    }\n    \n    # Setting the plot\n    at_x <- pretty(seq.Date(from = min(d$df$index),\n                            to = max(fc$index),\n                            by = \"month\"))\n    \n    at_y <- c(pretty(c(d$df$input, fc$upr)), 1200)\n    \n    plot(x = d$df$index, y = d$df$input,\n         col = \"#1f77b4\",\n         type = \"l\",\n         frame.plot = FALSE,\n         axes = FALSE,\n         panel.first = abline(h = at_y, col = \"grey80\"),\n         #main = paste0(\"AirPassengers Forecast:\", table$Gene[1]),\n         main = \"AirPassengers Forecast lol\",\n         xlim = c(min(d$df$index), max(fc$index)),\n         ylim = c(min(c(min(d$df$input), min(fc$lwr))), max(c(max(fc$upr), max(d$df$input)))),\n         xlab = paste(\"Model:\", input$model, sep = \" \"),\n         ylab = \"Num. of Passengers (in Thousands)\")\n    mtext(side =1, text = format(at_x, format = \"%Y-%M\"), at = at_x,\n          col = \"grey20\", line = 1, cex = 0.8)\n    \n    mtext(side =2, text = format(at_y, scientific = FALSE), at = at_y,\n          col = \"grey20\", line = 1, cex = 0.8)\n    lines(x = fc$index, y = fc$fit, col = '#1f77b4', lty = 2, lwd = 2)\n    lines(x = fc$index, y = fc$upr, col = 'blue', lty = 2, lwd = 2)\n    lines(x = fc$index, y = fc$lwr, col = 'blue', lty = 2, lwd = 2)\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"temp_test.RData","content":"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\nADoi8BQkWAAA","type":"binary"}]
